// Flexbox mixins
@mixin flex {
  display: flex;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-around {
  display: flex;
  align-items: center;
  justify-content: space-around;
}

@mixin flex-end {
  display: flex;
  align-items: center;
  justify-content: flex-end;
}

// Typography mixins
@mixin font-size($size) {
  font-size: $size;
}

@mixin heading-1 {
  font-family: $font-family-heading;
  font-size: $font-size-xxxl;
  font-weight: $font-weight-bold;
  line-height: $line-height-sm;
}

@mixin heading-2 {
  font-family: $font-family-heading;
  font-size: $font-size-xxl;
  font-weight: $font-weight-bold;
  line-height: $line-height-sm;
}

@mixin heading-3 {
  font-family: $font-family-heading;
  font-size: $font-size-xl;
  font-weight: $font-weight-bold;
  line-height: $line-height-sm;
}

@mixin heading-4 {
  font-family: $font-family-heading;
  font-size: $font-size-lg;
  font-weight: $font-weight-medium;
  line-height: $line-height-sm;
}

// Responsive mixins
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: $breakpoint-sm - 1) {
      @content;
    }
  } @else if $breakpoint == sm {
    @media (min-width: $breakpoint-sm) and (max-width: $breakpoint-md - 1) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (min-width: $breakpoint-md) and (max-width: $breakpoint-lg - 1) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (min-width: $breakpoint-lg) and (max-width: $breakpoint-xl - 1) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media (min-width: $breakpoint-xl) {
      @content;
    }
  }
}

@mixin respond-above($breakpoint) {
  @if $breakpoint == xs {
    @media (min-width: $breakpoint-sm) {
      @content;
    }
  } @else if $breakpoint == sm {
    @media (min-width: $breakpoint-md) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (min-width: $breakpoint-lg) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (min-width: $breakpoint-xl) {
      @content;
    }
  }
}

@mixin respond-below($breakpoint) {
  @if $breakpoint == sm {
    @media (max-width: $breakpoint-sm - 1) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (max-width: $breakpoint-md - 1) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (max-width: $breakpoint-lg - 1) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media (max-width: $breakpoint-xl - 1) {
      @content;
    }
  }
}

// Button mixins
@mixin button-base {
  display: inline-block;
  font-weight: $font-weight-medium;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  border: $border-width solid transparent;
  padding: $spacing-sm $spacing-lg;
  font-size: $font-size-base;
  line-height: $line-height-base;
  border-radius: $border-radius;
  transition: $transition-base;
  cursor: pointer;
  
  &:hover, &:focus {
    text-decoration: none;
    outline: none;
  }
  
  &:disabled {
    opacity: 0.65;
    cursor: not-allowed;
  }
}

@mixin button-variant($background, $border, $hover-background, $hover-border, $active-background, $active-border) {
  color: $white;
  background-color: $background;
  border-color: $border;

  &:hover {
    color: $white;
    background-color: $hover-background;
    border-color: $hover-border;
  }

  &:focus, &:active {
    color: $white;
    background-color: $active-background;
    border-color: $active-border;
    box-shadow: 0 0 0 0.2rem rgba($background, 0.5);
  }
}

// Card mixins
@mixin card {
  background-color: $white;
  border-radius: $border-radius;
  box-shadow: $box-shadow;
  overflow: hidden;
}

// Transition mixins
@mixin transition($property: all, $duration: 0.3s, $timing: ease) {
  transition: $property $duration $timing;
}

// Gradient mixins
@mixin gradient-primary {
  background: linear-gradient(to right, $primary-color, $secondary-color);
}

@mixin gradient-primary-vertical {
  background: linear-gradient(to bottom, $primary-color, $secondary-color);
}

// Shadow mixins
@mixin shadow-sm {
  box-shadow: $box-shadow-sm;
}

@mixin shadow {
  box-shadow: $box-shadow;
}

@mixin shadow-lg {
  box-shadow: $box-shadow-lg;
}

// Text truncate
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Clearfix
@mixin clearfix {
  &::after {
    display: block;
    content: "";
    clear: both;
  }
}